#!/bin/bash

#Flags processing
flag=0
originPath=""
destinationPath=""
filesSynced=0

red=`tput setaf 1`
green=`tput setaf 2`
reset=`tput sgr0`

#Number of arguments should be greater than 1
#At least 2 paths
if (( $# < 2 )); then
echo "Call script with correct number of arguments."
exit 25
fi

#If passed 2 params and 1 of them is key
#Still not enough arguments
if [ "$1" = "-v" ] && [ $# -eq 2 ]; then
echo "Not enough arguments."
exit 25
fi

#If passed verbose flag
if [ "$1" = "-v" ] && [ $# -ge 3 ]; then
flag=1
fi

if [ $flag -eq 1 ]; then
echo "Flag is setted up."
originPath="$2"
destinationPath="$3"
else
originPath="$1"
destinationPath="$2"
fi

if [ $flag -eq 1 ]; then
echo "Present of -v flag: $flag"
echo "Origin path(1): ${green}$originPath${reset}"
echo "Destination path(2): ${green}$destinationPath${reset}"
fi

function syncData {
local lOriginPath=$1
local lDestinationPath=$2

if [ $flag -eq 1 ]; then
echo "New origin: ${green}$lOriginPath${reset}"
echo "New destination: ${green}$lDestinationPath${reset}"
fi

#Loop over files in origin directory
for file in $lOriginPath/*; do
	#When file is an directory
	if [ -d $file ]; then
		if [ $flag -eq 1 ]; then
	        	echo "Directory found: $file"
		fi
		#Checking is such directory exists in destionation path
		if [ -e $lDestinationPath/$(basename $file) ] && [ -d $lDestinationPath/$(basename $file) ]; then
			if [ $flag -eq 1 ]; then
				echo "Directory in destination exists. Start sync."
			fi
		#Otherwise create this directory
		else
			if [ $flag -eq 1 ]; then
				echo "Creating directory in destination."
			fi
			mkdir $lDestinationPath/$(basename $file)
		fi
		#Recursively call this function
		syncData $file $lDestinationPath/$(basename $file)
	#When file is an file and exists in destination directory
	elif [ -f "$lDestinationPath/$(basename $file)" ]; then
		#Get modification time of origin file
		local firstFile=$(date -r $file +"%s")
		#Get modification time of target file
	    local secondFile=$(date -r $lDestinationPath/$(basename $file) +"%s")
	    if [ $flag -eq 1 ]; then
        	echo "Seconds $firstFile"
        	echo "Seconds2 $secondFile"
        fi
        #Whether origin file newer than target
        if [ $firstFile -gt $secondFile ]; then
            if [ $flag -eq 1 ]; then
                echo "Copying: $file"
                echo "To: $lDestinationPath/$(basename $file)"
            fi
            cp $file $lDestinationPath/
            filesSynced=$((filesSynced+1))
        #Otherwise we should ask user or keep all as is
        elif [ $firstFile -lt $secondFile ]; then
        	if [ $flag -eq 1 ]; then
            	read -n1 -p "Newer ${red}$(basename $file)${reset} in destination. Keep as is(0) or replace with older version(1)? "
            	echo ""
            	if [ $REPLY -ge 1 ]; then
            		#Replace with older version
                	cp $file $lDestinationPath/
                	filesSynced=$((filesSynced+1))
            	fi
            fi
        fi
    #When file not presents in destination folder
	else
		if [ $flag -eq 1 ]; then
			echo "File ${red}$(basename $file)${reset} doesn't exists in destination."
		fi
		cp $file $lDestinationPath/
		filesSynced=$((filesSynced+1))
	fi
done
}

syncData $originPath $destinationPath

if [ $flag -eq 1 ]; then
	echo "Files synced: ${green}$filesSynced${reset}."
fi
